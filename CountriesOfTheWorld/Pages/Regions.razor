@page "/regions"
@inject HttpClient Http


<h5>Data by World Region</h5>

<div class="row">
    <div class="col-sm-2">
     <label><input type="radio" name="option" @bind="isEurope" @onclick="EuropeToggle">Europe </label>
     </div>
    <div class="col-sm-2">
        <label><input type="radio" name="option" @bind="isAsia">Asia </label>
    </div>
    <div class="col-sm-2">
        <label><input type="radio" name="option" @bind="isAfrica">Africa </label>
    </div>
    <div class="col-sm-2">
        <label><input type="radio" name="option" @bind="isAmericas">Americas </label>
    </div>
    <div class="col-sm-2">
        <label><input type="radio" name="option" @bind="isOceania">Oceania </label>
    </div>
</div>









@if (data == null)
{
    <p><em>Loading.....</em></p> }
else
{


    <table class="table">
        <thead>
            <tr>
                <th>Country</th>
                <th>Capital City</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in data)
            {
                <tr>
                    <td>Country: @d.name</td>
                    <td>Capital: @d.capital</td>
                </tr>
            }
        </tbody>
    </table>

}
@code {


    // Need instance of Root as data (response obj) needs to contain an IEnumerable to iterate over
    // Set this up to contain objects of the model class CountryData as below
    public class Root
    {
        public List<CountryData> MyArray { get; set; }
    }

    // List of country data based on model class, all attributes are contained within
    private List<CountryData> data;
    private string errorMsg;
    private bool found;
    [Parameter]
    public bool isEurope { get; set; }
    [Parameter]
    public bool isAsia { get; set; }
    [Parameter]
    public bool isAfrica { get; set; }
    [Parameter]
    public bool isAmericas { get; set; }
    [Parameter]
    public bool isOceania { get; set; }

    public event Action OnRegionSelect;


    private void EuropeToggle(MouseEventArgs e)
    {
        OnRegionSelect?.Invoke();
        bool isClicked = false;
    }

    // following: visualstudiomagazine.com/articles/2018/10/01/blazor-event-handling.aspx

    // Regional GETS
    private async Task GetDataAsync()
    {
        try
        {

            string europeUri = "https://restcountries.eu/rest/v2/region/europe";
            string asiaUri = "https://restcountries.eu/rest/v2/region/asia";
            string africaUri = "https://restcountries.eu/rest/v2/region/africa";
            string americasUri = "https://restcountries.eu/rest/v2/region/americas";
            string oceaniaUri = "https://restcountries.eu/rest/v2/region/oceania";
            // Logic to select data based on user selected region

            if (isEurope == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(europeUri);
            }
            if (isAsia == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(asiaUri);
            }
            if (isAfrica == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(africaUri);
            }
            if (isAmericas == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(americasUri);
            }
            if (isOceania == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(americasUri);
            }

            errorMsg = String.Empty;
            found = true;

        }
        catch (Exception e)
        {
            found = false;
            errorMsg = e.Message;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync();
    }



}



