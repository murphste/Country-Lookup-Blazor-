@page "/regions"
@inject HttpClient Http


<h5>Data by World Region</h5>

<div class="row">
            <div class="col-sm-2">
                <label>
                    <input type="radio" name="option" @bind="isSelectedEurope" @onclick="@HandleOnSelectedEurope">Europe
                </label>
            </div>
            <div class="col-sm-2">
                <label>
                    <input type="radio" name="option" @bind="isSelectedAsia" @onclick="@HandleOnSelectedAsia">Asia
                </label>
            </div>
            <div class="col-sm-2">
                <label>
                    <input type="radio" name="option" @bind="isSelectedAfrica" @onclick="@HandleOnSelectedAfrica">Africa
                </label>
            </div>
            <div class="col-sm-2">
                <label>
                    <input type="radio" name="option" @bind="isSelectedAmericas" @onclick="@HandleOnSelectedAmericas">Americas
                </label>
            </div>
            <div class="col-sm-2">
                <label>
                    <input type="radio" name="option" @bind="isSelectedOceania" @onclick="@HandleOnSelectedOceania">Oceania
                </label>
            </div>
        </div>








@if (data == null)
{
    <p><em>This page should display data according to the region selected above.</em></p>
    <p>I've done a good bit in source code to try to get this working - I feel like I was very close. Please review it.</p>
    }
else
{


    <table class="table">
        <thead>
            <tr>
                <th>Country</th>
                <th>Capital City</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in data)
            {
                <tr>
                    <td>Country: @d.name</td>
                    <td>Capital: @d.capital</td>
                </tr>
            }
        </tbody>
    </table>

}
@code {


    // Need instance of Root as data (response obj) needs to contain an IEnumerable to iterate over
    // Set this up to contain objects of the model class CountryData as below
    public class Root
    {
        public List<CountryData> MyArray { get; set; }
    }

    // List of country data based on model class, all attributes are contained within
    private List<CountryData> data;
    private string errorMsg;
    private bool found;
    [Parameter] public bool isSelectedEurope { get; set; } = false;
    [Parameter] public bool isSelectedAsia { get; set; } = false;
    [Parameter] public bool isSelectedAfrica { get; set; } = false;
    [Parameter] public bool isSelectedAmericas { get; set; } = false;
    [Parameter] public bool isSelectedOceania { get; set; } = false;


    public int ButtonVal { get; set; }



    @*private readonly Regions regionsModel = new Regions();
    public void RadioButtonClicked(int value)
    {
        regionsModel.ButtonVal = value;
        if (ButtonVal == 1)
        {
        }
        else if (ButtonVal == 2)
        {
            //HandleOnSelectedAsia();
        }

    }*@



    // Toggle state handlers for radio buttons
    private void HandleOnSelectedEurope()
    {
        // Check existing state first (although pointless really, as Radio button)
        if (isSelectedEurope)
        {
            isSelectedEurope = false;
        }
        else
        {
            // Change state
            isSelectedEurope = true;
        }
    }

    private void HandleOnSelectedAsia()
    {
        if (isSelectedAsia)
        {

            isSelectedAsia = false;
        }
        else
        {
            // Change state
            isSelectedAsia = true;
        }
    }

    private void HandleOnSelectedAfrica()
    {
        if (isSelectedAfrica)
        {

            isSelectedAfrica = false;
        }
        else
        {
            // Change state
            isSelectedAfrica = true;
        }
    }

    private void HandleOnSelectedAmericas()
    {
        if (isSelectedAmericas)
        {

            isSelectedAmericas = false;
        }
        else
        {
            // Change state
            isSelectedAmericas = true;
        }
    }

    private void HandleOnSelectedOceania()
    {
        if (isSelectedOceania)
        {

            isSelectedOceania = false;
        }
        else
        {
            // Change state
            isSelectedOceania = true;
        }
    }


    @*public event Action OnRegionSelect;


    private async Task EuropeToggle(MouseEventArgs e)
    {


        bool isClicked = false;

    }*@

    // following: visualstudiomagazine.com/articles/2018/10/01/blazor-event-handling.aspx

    // Regional GETS
    private async Task GetDataAsync()
    {
        try
        {

            string europeUri = "https://restcountries.eu/rest/v2/region/europe";
            string asiaUri = "https://restcountries.eu/rest/v2/region/asia";
            string africaUri = "https://restcountries.eu/rest/v2/region/africa";
            string americasUri = "https://restcountries.eu/rest/v2/region/americas";
            string oceaniaUri = "https://restcountries.eu/rest/v2/region/oceania";
            // Logic to select data based on user selected region
            if (isSelectedEurope == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(europeUri);
            }
            else if (isSelectedAsia == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(asiaUri);
            }
            else if (isSelectedAfrica == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(africaUri);
            }
            else if (isSelectedAmericas == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(americasUri);
            }
            else if (isSelectedOceania == true)
            {
                data = await Http.GetFromJsonAsync<List<CountryData>>(americasUri);
            }

            errorMsg = String.Empty;
            found = true;

        }
        catch (Exception e)
        {
            found = false;
            errorMsg = e.Message;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync();
    }



}



